{"version":3,"file":"static/js/762.40f15991.chunk.js","mappings":"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","sources":["api/api.js","pages/Events.styled.js","pages/Events.jsx"],"sourcesContent":["// api.js\nimport axios from 'axios';\naxios.defaults.baseURL = 'https://66430a433c01a059ea213b70.mockapi.io/api';\n\nexport const getAllEvents = async sortBy => {\n  const url = new URL('/events', axios.defaults.baseURL);\n  if (sortBy) {\n    url.searchParams.append('sortBy', sortBy);\n  }\n  try {\n    const response = await axios.get(url.toString());\n    // console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to fetch events:', error.message);\n    throw error;\n  }\n};\n\nexport const getEvents = async (page, sortBy) => {\n  const url = new URL('/events', axios.defaults.baseURL);\n  if (page) {\n    url.searchParams.append('page', page);\n  }\n  url.searchParams.append('limit', 12);\n  if (sortBy) {\n    url.searchParams.append('sortBy', sortBy);\n  }\n\n  try {\n    const response = await axios.get(url.toString());\n    // console.log(response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Failed to fetch events:', error.message);\n    throw error;\n  }\n};\n\nexport const getViews = async page => {\n  const url = new URL('/users', axios.defaults.baseURL);\n\n  try {\n    const response = await axios.get(url.toString());\n\n    return response.data;\n  } catch (error) {\n    console.error('Failed to fetch users:', error.message);\n    throw error;\n  }\n};\n\nexport const postViews = async userData => {\n  const { fullName, email, dateOfBirth, whereHeard, event } = userData;\n  const url = new URL('/users', axios.defaults.baseURL);\n\n  try {\n    const response = await axios.post(url.toString(), {\n      fullName: fullName,\n      email: email,\n      dateOfBirth: dateOfBirth,\n      whereHeard: whereHeard,\n      event: event,\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Failed to fetch users:', error.message);\n    throw error;\n  }\n};\n\nexport const patchViews = async (id, event) => {\n  const url = new URL(`/users/${id}`, axios.defaults.baseURL);\n\n  try {\n    const response = await axios.patch(url.toString(), {\n      // fullName: fullName,\n      // email: email,\n      // dateOfBirth: dateOfBirth,\n      // whereHeard: whereHeard,\n      event: event,\n    });\n\n    return response.data;\n  } catch (error) {\n    console.error('Failed to fetch users:', error.message);\n    throw error;\n  }\n};\n","import styled from 'styled-components';\nconst DivEvents = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 40px;\n  justify-content: center;\n`;\nconst DivEvent = styled.div`\n  border: 1px solid black;\n  width: 290px;\n  padding: 16px;\n`;\n\nconst DivRegisterView = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst H1 = styled.h1`\n  left: 420px;\n  top: 400px;\n  font-size: 24px;\n\n  margin: 40px 0 40px 0;\n  padding-left: 12px;\n`;\n\nconst H2 = styled.h2``;\nconst P = styled.p`\n  margin-bottom: 50px;\n`;\n\nconst Section = styled.section``;\nconst DivPagination = styled.div`\n  margin-top: 30px;\n  text-align: center;\n  padding-bottom: 80px;\n`;\n\nconst PaginationButton = styled.button`\n  padding: 5px 10px;\n  margin: 0 5px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  /* background-color: transparent;\n  color: black; */\n  background-color: #3470ff;\n  color: #ffffff;\n  cursor: pointer;\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n\n  &:hover:not(:disabled) {\n    /* background-color: #f0f0f0; */\n    background-color: #0b44cd;\n  }\n`;\n\nconst SpanPagination = styled.span`\n  margin: 0 10px;\n`;\nconst ButtonSort = styled.button`\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 1.43;\n  /* line-height: 143%; */\n  border-radius: 5px;\n\n  width: 136px;\n  height: 48px;\n  background-color: #3470ff;\n  color: #ffffff;\n  &:hover,\n  &:focus {\n    background-color: #0b44cd;\n  }\n`;\nconst DivButton = styled.div`\n  display: flex;\n  margin-left: 11px;\n  gap: 200px;\n  margin-bottom: 40px;\n`;\nconst DivSortButton = styled.div`\n  display: flex;\n\n  gap: 50px;\n`;\n\nexport {\n  SpanPagination,\n  DivEvents,\n  DivEvent,\n  DivRegisterView,\n  H1,\n  H2,\n  P,\n  Section,\n  DivPagination,\n  PaginationButton,\n  ButtonSort,\n  DivButton,\n  DivSortButton,\n};\n","// // Events.jsx\n// pagination (c пагинацией)\n// import { getAllEvents, getEvents } from \"api/api\";\n// import {\n//   H1,\n//   Section,\n//   DivEvents,\n//   DivEvent,\n//   DivRegisterView,\n//   H2,\n//   P,\n//   DivPagination,\n//   SpanPagination,\n//   PaginationButton,\n//   ButtonSort,\n//   DivSortButton,\n//   DivButton,\n// } from \"./Events.styled\";\n// import React, { useState, useEffect } from \"react\";\n// import { Link, useLocation } from \"react-router-dom\";\n\n// import styled from \"styled-components\";\n\n// const LinkRegisterView = styled(Link)`\n//   color: #3470ff;\n//   font-weight: 600;\n\n//   &:hover {\n//     color: #0b44cd;\n//   }\n\n//   &:focus {\n//     color: #0b44cd;\n//   }\n// `;\n\n// const Events = () => {\n//   const location = useLocation();\n//   const [events, setEvents] = useState([]);\n//   const [totalPages, setTotalPages] = useState(1);\n//   const [lengthArray, setLengthArray] = useState(0);\n//   const [currentPage, setCurrentPage] = useState(\n//     parseInt(localStorage.getItem(\"currentPage\"), 10) || 1\n//   );\n//   const [sortBy, setSortBy] = useState(\"\");\n//   const [resetFilters, setResetFilters] = useState(false);\n\n//   const fetchAllEvents = async (page) => {\n//     try {\n//       const results = await getAllEvents();\n\n//       setLengthArray(results.length);\n//     } catch (err) {\n//       console.log(err.message);\n//     }\n//   };\n\n//   const fetchEvents = async (page, sortBy) => {\n//     try {\n//       const results = await getEvents(page, sortBy);\n//       setEvents(results);\n//       // console.log(results);\n\n//       setTotalPages(Math.ceil(lengthArray / results.length));\n//     } catch (err) {\n//       console.log(err.message);\n//     }\n//   };\n\n//   useEffect(() => {\n//     const currentPageFromStorage = parseInt(\n//       localStorage.getItem(\"currentPage\"),\n//       10\n//     );\n\n//     if (currentPageFromStorage && currentPageFromStorage !== currentPage) {\n//       setCurrentPage(currentPageFromStorage);\n//     }\n//     fetchAllEvents();\n\n//     fetchEvents(currentPage, sortBy);\n//     // eslint-disable-next-line\n//   }, [currentPage, totalPages, sortBy, resetFilters]);\n\n//   const handleNextPage = () => {\n//     const nextPage = currentPage + 1;\n//     setCurrentPage(nextPage);\n//     localStorage.setItem(\"currentPage\", nextPage);\n//   };\n\n//   const handlePrevPage = () => {\n//     const prevPage = currentPage - 1;\n//     setCurrentPage(prevPage);\n//     localStorage.setItem(\"currentPage\", prevPage);\n//   };\n\n//   const handleSortByTitle = () => {\n//     setSortBy(\"title\");\n//   };\n//   const handleSortEventDate = () => {\n//     setSortBy(\"eventdate\");\n//   };\n//   const handleSortByOrganizer = () => {\n//     setSortBy(\"organizer\");\n//   };\n\n//   const handleResetFilters = () => {\n//     setResetFilters((prevState) => !prevState);\n//     setSortBy(\"\");\n//   };\n\n//   return (\n//     <>\n//       <Section>\n//         <H1>Events</H1>\n//         <DivButton>\n//           <DivSortButton>\n//             <ButtonSort onClick={handleSortByTitle}>Sort by title</ButtonSort>\n//             <ButtonSort onClick={handleSortEventDate}>\n//               Sort by event date\n//             </ButtonSort>\n//             <ButtonSort onClick={handleSortByOrganizer}>\n//               Sort by organizer\n//             </ButtonSort>\n//           </DivSortButton>\n//           <ButtonSort onClick={handleResetFilters}>Reset Filters</ButtonSort>\n//         </DivButton>\n\n//         <DivEvents className={\"css.events\"}>\n//           {events && events.length > 0 ? (\n//             events.map((event, index) => {\n//               return (\n//                 <DivEvent key={index} className={\"css.event_div\"}>\n//                   <H2>{event.title}</H2>\n//                   <P>{event.description}</P>\n//                   <DivRegisterView>\n//                     <LinkRegisterView\n//                       to={`/register/${event.id}`}\n//                       state={{\n//                         from: location,\n//                         title: event.title,\n//                       }}\n//                     >\n//                       Register\n//                     </LinkRegisterView>\n\n//                     <LinkRegisterView\n//                       to={`/view/${event.id}`}\n//                       state={{\n//                         from: location,\n//                         title: event.title,\n//                       }}\n//                     >\n//                       View\n//                     </LinkRegisterView>\n//                   </DivRegisterView>\n//                 </DivEvent>\n//               );\n//             })\n//           ) : (\n//             <p>No events found</p>\n//           )}\n//         </DivEvents>\n\n//         <DivPagination className={\"css.pagination\"}>\n//           <PaginationButton\n//             onClick={handlePrevPage}\n//             disabled={currentPage === 1}\n//           >\n//             Previous\n//           </PaginationButton>\n//           <SpanPagination className={\"css.span_pagination\"}>\n//             {Array.from({ length: totalPages }, (_, index) => (\n//               <span\n//                 key={index}\n//                 style={{\n//                   color: currentPage === index + 1 ? \"#3470ff\" : \"inherit\",\n//                   fontWeight: 600,\n//                 }}\n//               >\n//                 {index + 1}\n//                 {index !== totalPages - 1 ? \" \" : \"\"}\n//               </span>\n//             ))}\n//           </SpanPagination>\n//           <PaginationButton\n//             onClick={handleNextPage}\n//             disabled={currentPage === totalPages}\n//           >\n//             Next\n//           </PaginationButton>\n//         </DivPagination>\n//       </Section>\n//     </>\n//   );\n// };\n// export default Events;\n// ============================================\n\n// infinite scroll pagination (бесконечная прокрутка страниц)\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport styled from \"styled-components\";\nimport { getAllEvents } from \"api/api\";\nimport {\n  H1,\n  Section,\n  DivEvents,\n  DivEvent,\n  DivRegisterView,\n  H2,\n  P,\n  ButtonSort,\n  DivSortButton,\n  DivButton,\n} from \"./Events.styled\";\n\nconst LinkRegisterView = styled(Link)`\n  color: #3470ff;\n  font-weight: 600;\n\n  &:hover {\n    color: #0b44cd;\n  }\n\n  &:focus {\n    color: #0b44cd;\n  }\n`;\n\nconst Events = () => {\n  const location = useLocation();\n  const [events, setEvents] = useState([]);\n  const [totalPages, setTotalPages] = useState(1);\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const [sortBy, setSortBy] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n\n  const fetchAllEvents = useCallback(async (sortBy) => {\n    try {\n      const results = await getAllEvents(sortBy);\n\n      setEvents(results);\n      setTotalPages(Math.ceil(results.length / 12));\n    } catch (err) {\n      console.log(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    fetchAllEvents(sortBy);\n  }, [fetchAllEvents, sortBy]);\n\n  useEffect(() => {\n    const handleScroll = () => {\n      if (\n        window.innerHeight + document.documentElement.scrollTop >=\n          document.documentElement.offsetHeight - 100 &&\n        !loading &&\n        currentPage < totalPages\n      ) {\n        setCurrentPage((prevPage) => prevPage + 1);\n      }\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, [loading, currentPage, totalPages]);\n\n  const handleSortByTitle = () => {\n    setSortBy(\"title\");\n    setCurrentPage(1); //\n  };\n\n  const handleSortEventDate = () => {\n    setSortBy(\"eventdate\");\n    setCurrentPage(1);\n  };\n\n  const handleSortByOrganizer = () => {\n    setSortBy(\"organizer\");\n    setCurrentPage(1);\n  };\n\n  const handleResetFilters = () => {\n    setSortBy(\"\");\n    setCurrentPage(1);\n  };\n\n  return (\n    <>\n      <Section>\n        <H1>Events</H1>\n        <DivButton>\n          <DivSortButton>\n            <ButtonSort onClick={handleSortByTitle}>Sort by title</ButtonSort>\n            <ButtonSort onClick={handleSortEventDate}>\n              Sort by event date\n            </ButtonSort>\n            <ButtonSort onClick={handleSortByOrganizer}>\n              Sort by organizer\n            </ButtonSort>\n          </DivSortButton>\n          <ButtonSort onClick={handleResetFilters}>Reset Filters</ButtonSort>\n        </DivButton>\n\n        <DivEvents className={\"css.events\"}>\n          {events && events.length > 0 ? (\n            events.map((event, index) => (\n              <DivEvent key={index} className={\"css.event_div\"}>\n                <H2>{event.title}</H2>\n                <P>{event.description}</P>\n                <DivRegisterView>\n                  <LinkRegisterView\n                    to={`/register/${event.id}`}\n                    state={{ from: location, title: event.title }}\n                  >\n                    Register\n                  </LinkRegisterView>\n\n                  <LinkRegisterView\n                    to={`/view/${event.id}`}\n                    state={{ from: location, title: event.title }}\n                  >\n                    View\n                  </LinkRegisterView>\n                </DivRegisterView>\n              </DivEvent>\n            ))\n          ) : (\n            <p>No events found</p>\n          )}\n          {loading && <p>Loading more events...</p>}\n        </DivEvents>\n      </Section>\n    </>\n  );\n};\n\nexport default Events;\n"],"names":["axios","getAllEvents","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","sortBy","url","response","_context","prev","next","URL","searchParams","append","toString","sent","abrupt","data","t0","console","error","message","stop","_x","apply","arguments","getViews","_ref3","_callee3","page","_context3","_x4","postViews","_ref4","_callee4","userData","fullName","email","dateOfBirth","whereHeard","event","_context4","_x5","DivEvents","styled","_templateObject","_taggedTemplateLiteral","DivEvent","_templateObject2","DivRegisterView","_templateObject3","H1","_templateObject4","H2","_templateObject5","P","_templateObject6","Section","_templateObject7","ButtonSort","_templateObject8","_templateObject9","_templateObject10","_templateObject11","DivButton","_templateObject12","DivSortButton","_templateObject13","LinkRegisterView","Link","location","useLocation","_useState","useState","_useState2","_slicedToArray","events","setEvents","_useState3","_useState4","totalPages","setTotalPages","_useState5","_useState6","currentPage","setCurrentPage","_useState7","_useState8","setSortBy","_useState9","_useState10","loading","setLoading","fetchAllEvents","useCallback","results","Math","ceil","length","log","finish","useEffect","handleScroll","window","innerHeight","document","documentElement","scrollTop","offsetHeight","prevPage","addEventListener","removeEventListener","_jsx","_Fragment","children","_jsxs","onClick","className","map","index","title","description","to","concat","id","state","from"],"sourceRoot":""}